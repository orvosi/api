// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/medical_record_updater.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/orvosi/api/entity"
)

// MockUpdateMedicalRecord is a mock of UpdateMedicalRecord interface
type MockUpdateMedicalRecord struct {
	ctrl     *gomock.Controller
	recorder *MockUpdateMedicalRecordMockRecorder
}

// MockUpdateMedicalRecordMockRecorder is the mock recorder for MockUpdateMedicalRecord
type MockUpdateMedicalRecordMockRecorder struct {
	mock *MockUpdateMedicalRecord
}

// NewMockUpdateMedicalRecord creates a new mock instance
func NewMockUpdateMedicalRecord(ctrl *gomock.Controller) *MockUpdateMedicalRecord {
	mock := &MockUpdateMedicalRecord{ctrl: ctrl}
	mock.recorder = &MockUpdateMedicalRecordMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUpdateMedicalRecord) EXPECT() *MockUpdateMedicalRecordMockRecorder {
	return m.recorder
}

// Update mocks base method
func (m *MockUpdateMedicalRecord) Update(ctx context.Context, email string, id uint64, record *entity.MedicalRecord) *entity.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, email, id, record)
	ret0, _ := ret[0].(*entity.Error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockUpdateMedicalRecordMockRecorder) Update(ctx, email, id, record interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUpdateMedicalRecord)(nil).Update), ctx, email, id, record)
}
