// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/sign_in.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/orvosi/api/entity"
)

// MockInsertUserRepository is a mock of InsertUserRepository interface
type MockInsertUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockInsertUserRepositoryMockRecorder
}

// MockInsertUserRepositoryMockRecorder is the mock recorder for MockInsertUserRepository
type MockInsertUserRepositoryMockRecorder struct {
	mock *MockInsertUserRepository
}

// NewMockInsertUserRepository creates a new mock instance
func NewMockInsertUserRepository(ctrl *gomock.Controller) *MockInsertUserRepository {
	mock := &MockInsertUserRepository{ctrl: ctrl}
	mock.recorder = &MockInsertUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInsertUserRepository) EXPECT() *MockInsertUserRepositoryMockRecorder {
	return m.recorder
}

// InsertOrIgnore mocks base method
func (m *MockInsertUserRepository) InsertOrIgnore(ctx context.Context, user *entity.User) *entity.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOrIgnore", ctx, user)
	ret0, _ := ret[0].(*entity.Error)
	return ret0
}

// InsertOrIgnore indicates an expected call of InsertOrIgnore
func (mr *MockInsertUserRepositoryMockRecorder) InsertOrIgnore(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOrIgnore", reflect.TypeOf((*MockInsertUserRepository)(nil).InsertOrIgnore), ctx, user)
}
