// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/medical_record_finder.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/orvosi/api/entity"
)

// MockFindMedicalRecordRepository is a mock of FindMedicalRecordRepository interface
type MockFindMedicalRecordRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFindMedicalRecordRepositoryMockRecorder
}

// MockFindMedicalRecordRepositoryMockRecorder is the mock recorder for MockFindMedicalRecordRepository
type MockFindMedicalRecordRepositoryMockRecorder struct {
	mock *MockFindMedicalRecordRepository
}

// NewMockFindMedicalRecordRepository creates a new mock instance
func NewMockFindMedicalRecordRepository(ctrl *gomock.Controller) *MockFindMedicalRecordRepository {
	mock := &MockFindMedicalRecordRepository{ctrl: ctrl}
	mock.recorder = &MockFindMedicalRecordRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFindMedicalRecordRepository) EXPECT() *MockFindMedicalRecordRepositoryMockRecorder {
	return m.recorder
}

// FindByID mocks base method
func (m *MockFindMedicalRecordRepository) FindByID(ctx context.Context, id uint64) (*entity.MedicalRecord, *entity.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, id)
	ret0, _ := ret[0].(*entity.MedicalRecord)
	ret1, _ := ret[1].(*entity.Error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID
func (mr *MockFindMedicalRecordRepositoryMockRecorder) FindByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockFindMedicalRecordRepository)(nil).FindByID), ctx, id)
}

// FindByEmail mocks base method
func (m *MockFindMedicalRecordRepository) FindByEmail(ctx context.Context, email string) ([]*entity.MedicalRecord, *entity.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByEmail", ctx, email)
	ret0, _ := ret[0].([]*entity.MedicalRecord)
	ret1, _ := ret[1].(*entity.Error)
	return ret0, ret1
}

// FindByEmail indicates an expected call of FindByEmail
func (mr *MockFindMedicalRecordRepositoryMockRecorder) FindByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEmail", reflect.TypeOf((*MockFindMedicalRecordRepository)(nil).FindByEmail), ctx, email)
}
