// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/medical_record_creator.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/orvosi/api/entity"
)

// MockInsertMedicalRecordRepository is a mock of InsertMedicalRecordRepository interface
type MockInsertMedicalRecordRepository struct {
	ctrl     *gomock.Controller
	recorder *MockInsertMedicalRecordRepositoryMockRecorder
}

// MockInsertMedicalRecordRepositoryMockRecorder is the mock recorder for MockInsertMedicalRecordRepository
type MockInsertMedicalRecordRepositoryMockRecorder struct {
	mock *MockInsertMedicalRecordRepository
}

// NewMockInsertMedicalRecordRepository creates a new mock instance
func NewMockInsertMedicalRecordRepository(ctrl *gomock.Controller) *MockInsertMedicalRecordRepository {
	mock := &MockInsertMedicalRecordRepository{ctrl: ctrl}
	mock.recorder = &MockInsertMedicalRecordRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInsertMedicalRecordRepository) EXPECT() *MockInsertMedicalRecordRepositoryMockRecorder {
	return m.recorder
}

// Insert mocks base method
func (m *MockInsertMedicalRecordRepository) Insert(ctx context.Context, record *entity.MedicalRecord) *entity.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, record)
	ret0, _ := ret[0].(*entity.Error)
	return ret0
}

// Insert indicates an expected call of Insert
func (mr *MockInsertMedicalRecordRepositoryMockRecorder) Insert(ctx, record interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockInsertMedicalRecordRepository)(nil).Insert), ctx, record)
}
