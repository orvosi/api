// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/medical_record_finder.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/orvosi/api/entity"
)

// MockMedicalRecordSelector is a mock of MedicalRecordSelector interface
type MockMedicalRecordSelector struct {
	ctrl     *gomock.Controller
	recorder *MockMedicalRecordSelectorMockRecorder
}

// MockMedicalRecordSelectorMockRecorder is the mock recorder for MockMedicalRecordSelector
type MockMedicalRecordSelectorMockRecorder struct {
	mock *MockMedicalRecordSelector
}

// NewMockMedicalRecordSelector creates a new mock instance
func NewMockMedicalRecordSelector(ctrl *gomock.Controller) *MockMedicalRecordSelector {
	mock := &MockMedicalRecordSelector{ctrl: ctrl}
	mock.recorder = &MockMedicalRecordSelectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMedicalRecordSelector) EXPECT() *MockMedicalRecordSelectorMockRecorder {
	return m.recorder
}

// FindByEmail mocks base method
func (m *MockMedicalRecordSelector) FindByEmail(ctx context.Context, email string) ([]*entity.MedicalRecord, *entity.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByEmail", ctx, email)
	ret0, _ := ret[0].([]*entity.MedicalRecord)
	ret1, _ := ret[1].(*entity.Error)
	return ret0, ret1
}

// FindByEmail indicates an expected call of FindByEmail
func (mr *MockMedicalRecordSelectorMockRecorder) FindByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEmail", reflect.TypeOf((*MockMedicalRecordSelector)(nil).FindByEmail), ctx, email)
}
