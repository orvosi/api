// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/sign_in.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/orvosi/api/entity"
)

// MockSignIn is a mock of SignIn interface
type MockSignIn struct {
	ctrl     *gomock.Controller
	recorder *MockSignInMockRecorder
}

// MockSignInMockRecorder is the mock recorder for MockSignIn
type MockSignInMockRecorder struct {
	mock *MockSignIn
}

// NewMockSignIn creates a new mock instance
func NewMockSignIn(ctrl *gomock.Controller) *MockSignIn {
	mock := &MockSignIn{ctrl: ctrl}
	mock.recorder = &MockSignInMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSignIn) EXPECT() *MockSignInMockRecorder {
	return m.recorder
}

// SignIn mocks base method
func (m *MockSignIn) SignIn(ctx context.Context, user *entity.User) *entity.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignIn", ctx, user)
	ret0, _ := ret[0].(*entity.Error)
	return ret0
}

// SignIn indicates an expected call of SignIn
func (mr *MockSignInMockRecorder) SignIn(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockSignIn)(nil).SignIn), ctx, user)
}
